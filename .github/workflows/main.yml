name: Publish Docker Image

on:
  push:
    branches: ['main']

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      
      - name: Install Docker
        run: |
          sudo apt-get -y install docker.io
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -aG docker $USER
        if: runner.os == 'Linux'
        
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: Crocodility/Simple-api
      - name: Build Docker image
        run: |
          docker build -t simple-api:${{ github.sha }} -t simple-api:${{ github.ref_name }} .
        working-directory: .

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: docker.io/crocodility/simple-api:stable
          labels: ${{ steps.meta.outputs.labels }}
      - name: Tag Docker image as 'latest'
        run: |
          docker tag simple-api:${{ github.sha }} simple-api:latest
        if: success()

      - name: Remove 'latest' tag from the previous version
        run: |
          if docker images simple-api:latest | grep -q ${GITHUB_SHA::12}; then
            docker rmi simple-api:latest
          fi
        if: success() && github.event_name == 'push'

      - name: Push Docker images
        run: |
          docker push simple-api:${{ github.sha }}
          docker push simple-api:${{ github.ref_name }}
          docker push simple-api:latest
        if: success()

      - name: Cleanup
        run: docker image prune -f 
